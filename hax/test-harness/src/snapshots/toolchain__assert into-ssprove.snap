---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: ssprove
  info:
    name: assert
    manifest: assert/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Assert.v" = '''
(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
From Jasmin Require Import word.

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations asserts {L1 : {fset Location}} {I1 : Interface} (_ : both L1 I1 'unit) : both L1 I1 'unit :=
  asserts _  :=
    letb _ := assert (ret_both (true : 'bool)) in
    letb _ := assert ((ret_both (1 : int32)) =.? (ret_both (1 : int32))) in
    letb _ := matchb prod_b (ret_both (2 : int32),ret_both (2 : int32)) with
    | '(left_val,right_val) =>
      solve_lift (assert (left_val =.? right_val))
    end in
    letb _ := matchb prod_b (ret_both (1 : int32),ret_both (2 : int32)) with
    | '(left_val,right_val) =>
      solve_lift (assert (not (left_val =.? right_val)))
    end in
    solve_lift (ret_both (tt : 'unit)) : both L1 I1 'unit.
Fail Next Obligation.
'''
