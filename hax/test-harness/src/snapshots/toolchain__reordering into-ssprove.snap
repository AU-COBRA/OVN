---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: ssprove
  info:
    name: reordering
    manifest: reordering/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Reordering.v" = '''
(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
From Jasmin Require Import word.

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

Definition t_Foo : choice_type :=
  ('unit ∐ 'unit).
Notation "'Foo_A_case'" := (inl tt) (at level 100).
Equations Foo_A {L : {fset Location}} {I : Interface} : both L I t_Foo :=
  Foo_A  :=
    solve_lift (ret_both (inl (tt : 'unit) : t_Foo)) : both L I t_Foo.
Fail Next Obligation.
Notation "'Foo_B_case'" := (inr tt) (at level 100).
Equations Foo_B {L : {fset Location}} {I : Interface} : both L I t_Foo :=
  Foo_B  :=
    solve_lift (ret_both (inr (tt : 'unit) : t_Foo)) : both L I t_Foo.
Fail Next Obligation.

Equations t_Foo_cast_to_repr {L1 : {fset Location}} {I1 : Interface} (x : both L1 I1 t_Foo) : both L1 I1 uint_size :=
  t_Foo_cast_to_repr x  :=
    matchb x with
    | Foo_A_case  =>
      solve_lift (ret_both (0 : uint_size))
    | Foo_B_case  =>
      solve_lift (ret_both (1 : uint_size))
    end : both L1 I1 uint_size.
Fail Next Obligation.

(*Not implemented yet? todo(item)*)

Equations f {L1 : {fset Location}} {I1 : Interface} (_ : both L1 I1 int32) : both L1 I1 t_Foo :=
  f _  :=
    Foo_A : both L1 I1 t_Foo.
Fail Next Obligation.

Equations no_dependency_1_ {L1 : {fset Location}} {I1 : Interface} (_ : both L1 I1 'unit) : both L1 I1 'unit :=
  no_dependency_1_ _  :=
    solve_lift (ret_both (tt : 'unit)) : both L1 I1 'unit.
Fail Next Obligation.

Equations no_dependency_2_ {L1 : {fset Location}} {I1 : Interface} (_ : both L1 I1 'unit) : both L1 I1 'unit :=
  no_dependency_2_ _  :=
    solve_lift (ret_both (tt : 'unit)) : both L1 I1 'unit.
Fail Next Obligation.

Definition t_Bar : choice_type :=
  (t_Foo).
Equations 0 {L : {fset Location}} {I : Interface} (s : both L I t_Bar) : both L I t_Foo :=
  0 s  :=
    bind_both s (fun x =>
      solve_lift (ret_both (x : t_Foo))) : both L I t_Foo.
Fail Next Obligation.
Equations Build_t_Bar {L0 : {fset Location}} {I0 : Interface} {0 : both L0 I0 t_Foo} : both L0 I0 (t_Bar) :=
  Build_t_Bar  :=
    bind_both 0 (fun 0 =>
      solve_lift (ret_both ((0) : (t_Bar)))) : both L0 I0 (t_Bar).
Fail Next Obligation.
Notation "'Build_t_Bar' '[' x ']' '(' '0' ':=' y ')'" := (Build_t_Bar (0 := y)).

Equations g {L1 : {fset Location}} {I1 : Interface} (_ : both L1 I1 'unit) : both L1 I1 t_Bar :=
  g _  :=
    Bar (solve_lift (f (ret_both (32 : int32)))) : both L1 I1 t_Bar.
Fail Next Obligation.
'''
