---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: coq
  info:
    name: let-else
    manifest: let-else/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Let_else.v" = '''
(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Definition let_else (opt : t_Option_t int32) : bool :=
  run match opt with
  | Option_Some x =>
    ControlFlow_Continue true
  | _ =>
    ControlFlow_Break false
  end.

Definition let_else_different_type (opt : t_Option_t int32) : bool :=
  run (let hoist1 := match opt with
    | Option_Some x =>
      ControlFlow_Continue (Option_Some (x.+(@repr WORDSIZE32 1)))
    | _ =>
      ControlFlow_Break false
    end : t_Option_t int32 in
  ControlFlow_Continue (let_else hoist1)).
'''
