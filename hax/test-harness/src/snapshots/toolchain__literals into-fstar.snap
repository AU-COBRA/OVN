---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: fstar
  info:
    name: literals
    manifest: literals/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: true
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0
stderr = 'Finished `dev` profile [unoptimized + debuginfo] target(s) in XXs'

[stdout]
diagnostics = []

[stdout.files]
"Literals.fst" = '''
module Literals
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let casts (x8: u8) (x16: u16) (x32: u32) (x64: u64) (xs: usize) : Prims.unit =
  let (_: u64):u64 =
    ((((cast (x8 <: u8) <: u64) +! (cast (x16 <: u16) <: u64) <: u64) +! (cast (x32 <: u32) <: u64)
        <:
        u64) +!
      x64
      <:
      u64) +!
    (cast (xs <: usize) <: u64)
  in
  let (_: u32):u32 =
    ((((cast (x8 <: u8) <: u32) +! (cast (x16 <: u16) <: u32) <: u32) +! x32 <: u32) +!
      (cast (x64 <: u64) <: u32)
      <:
      u32) +!
    (cast (xs <: usize) <: u32)
  in
  let (_: u16):u16 =
    ((((cast (x8 <: u8) <: u16) +! x16 <: u16) +! (cast (x32 <: u32) <: u16) <: u16) +!
      (cast (x64 <: u64) <: u16)
      <:
      u16) +!
    (cast (xs <: usize) <: u16)
  in
  let (_: u8):u8 =
    (((x8 +! (cast (x16 <: u16) <: u8) <: u8) +! (cast (x32 <: u32) <: u8) <: u8) +!
      (cast (x64 <: u64) <: u8)
      <:
      u8) +!
    (cast (xs <: usize) <: u8)
  in
  let (_: i64):i64 =
    ((((cast (x8 <: u8) <: i64) +! (cast (x16 <: u16) <: i64) <: i64) +! (cast (x32 <: u32) <: i64)
        <:
        i64) +!
      (cast (x64 <: u64) <: i64)
      <:
      i64) +!
    (cast (xs <: usize) <: i64)
  in
  let (_: i32):i32 =
    ((((cast (x8 <: u8) <: i32) +! (cast (x16 <: u16) <: i32) <: i32) +! (cast (x32 <: u32) <: i32)
        <:
        i32) +!
      (cast (x64 <: u64) <: i32)
      <:
      i32) +!
    (cast (xs <: usize) <: i32)
  in
  let (_: i16):i16 =
    ((((cast (x8 <: u8) <: i16) +! (cast (x16 <: u16) <: i16) <: i16) +! (cast (x32 <: u32) <: i16)
        <:
        i16) +!
      (cast (x64 <: u64) <: i16)
      <:
      i16) +!
    (cast (xs <: usize) <: i16)
  in
  let (_: i8):i8 =
    ((((cast (x8 <: u8) <: i8) +! (cast (x16 <: u16) <: i8) <: i8) +! (cast (x32 <: u32) <: i8)
        <:
        i8) +!
      (cast (x64 <: u64) <: i8)
      <:
      i8) +!
    (cast (xs <: usize) <: i8)
  in
  ()

/// https://github.com/hacspec/hax/issues/500
let fn_pointer_cast (_: Prims.unit) : Prims.unit =
  let (f: (u32 -> u32)): u32 -> u32 = fun x -> x in
  ()

let math_integers (x: Hax_lib.Int.t_Int)
    : Prims.Pure u8
      (requires x > (0 <: Hax_lib.Int.t_Int) && x < (16 <: Hax_lib.Int.t_Int))
      (fun _ -> Prims.l_True) =
  let (_: Hax_lib.Int.t_Int):Hax_lib.Int.t_Int = Rust_primitives.Hax.Int.from_machine (sz 3) in
  let _:bool =
    ((-340282366920938463463374607431768211455000) <: Hax_lib.Int.t_Int) >
    (340282366920938463463374607431768211455000 <: Hax_lib.Int.t_Int)
  in
  let _:bool = x < x in
  let _:bool = x >= x in
  let _:bool = x <= x in
  let _:bool = x <> x in
  let _:bool = x = x in
  let _:Hax_lib.Int.t_Int = x + x in
  let _:Hax_lib.Int.t_Int = x - x in
  let _:Hax_lib.Int.t_Int = x * x in
  let _:Hax_lib.Int.t_Int = x / x in
  let (_: i16):i16 = Hax_lib.Int.impl__Int__to_i16 x in
  let (_: i32):i32 = Hax_lib.Int.impl__Int__to_i32 x in
  let (_: i64):i64 = Hax_lib.Int.impl__Int__to_i64 x in
  let (_: i128):i128 = Hax_lib.Int.impl__Int__to_i128 x in
  let (_: isize):isize = Hax_lib.Int.impl__Int__to_isize x in
  let (_: u16):u16 = Hax_lib.Int.impl__Int__to_u16 x in
  let (_: u32):u32 = Hax_lib.Int.impl__Int__to_u32 x in
  let (_: u64):u64 = Hax_lib.Int.impl__Int__to_u64 x in
  let (_: u128):u128 = Hax_lib.Int.impl__Int__to_u128 x in
  let (_: usize):usize = Hax_lib.Int.impl__Int__to_usize x in
  Hax_lib.Int.impl__Int__to_u8 (x + (x * x <: Hax_lib.Int.t_Int) <: Hax_lib.Int.t_Int)

let numeric (_: Prims.unit) : Prims.unit =
  let (_: usize):usize = sz 123 in
  let (_: isize):isize = isz (-42) in
  let (_: isize):isize = isz 42 in
  let (_: i32):i32 = (-42l) in
  let (_: u128):u128 = pub_u128 22222222222222222222 in
  ()

let panic_with_msg (_: Prims.unit) : Prims.unit =
  Rust_primitives.Hax.never_to_any (Core.Panicking.panic_fmt (Core.Fmt.impl_2__new_const (sz 1)
            (let list = ["with msg"] in
              FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
              Rust_primitives.Hax.array_of_list 1 list)
          <:
          Core.Fmt.t_Arguments)
      <:
      Rust_primitives.Hax.t_Never)

let empty_array (_: Prims.unit) : Prims.unit =
  let (_: t_Slice u8):t_Slice u8 =
    (let list:Prims.list u8 = [] in
      FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 0);
      Rust_primitives.Hax.array_of_list 0 list)
    <:
    t_Slice u8
  in
  ()

type t_Foo = { f_field:u8 }

let v_CONSTANT: t_Foo = { f_field = 3uy } <: t_Foo

let patterns (_: Prims.unit) : Prims.unit =
  let _:Prims.unit =
    match 1uy with
    | 2uy -> () <: Prims.unit
    | _ -> () <: Prims.unit
  in
  let _:Prims.unit =
    match
      "hello",
      (123l,
        (let list = ["a"; "b"] in
          FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 2);
          Rust_primitives.Hax.array_of_list 2 list)
        <:
        (i32 & t_Array string (sz 2)))
      <:
      (string & (i32 & t_Array string (sz 2)))
    with
    | "hello", (123l, v__todo) -> () <: Prims.unit
    | _ -> () <: Prims.unit
  in
  let _:Prims.unit =
    match { f_field = 4uy } <: t_Foo with
    | { f_field = 3uy } -> () <: Prims.unit
    | _ -> () <: Prims.unit
  in
  ()
'''
