---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: coq
  info:
    name: literals
    manifest: literals/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: true
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0
stderr = 'Finished `dev` profile [unoptimized + debuginfo] target(s) in XXs'

[stdout]
diagnostics = []

[stdout.files]
"Literals.v" = '''
(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Hax_lib_Int.
Export Hax_lib_Int.

(*Not implemented yet? todo(item)*)

Definition casts (x8 : int8) (x16 : int16) (x32 : int32) (x64 : int64) (xs : uint_size) : unit :=
  let (_ : int64) := ((((cast x8).+(cast x16)).+(cast x32)).+x64).+(cast xs) : int64 in
  let (_ : int32) := ((((cast x8).+(cast x16)).+x32).+(cast x64)).+(cast xs) : int32 in
  let (_ : int16) := ((((cast x8).+x16).+(cast x32)).+(cast x64)).+(cast xs) : int16 in
  let (_ : int8) := (((x8.+(cast x16)).+(cast x32)).+(cast x64)).+(cast xs) : int8 in
  let (_ : int64) := ((((cast x8).+(cast x16)).+(cast x32)).+(cast x64)).+(cast xs) : int64 in
  let (_ : int32) := ((((cast x8).+(cast x16)).+(cast x32)).+(cast x64)).+(cast xs) : int32 in
  let (_ : int16) := ((((cast x8).+(cast x16)).+(cast x32)).+(cast x64)).+(cast xs) : int16 in
  let (_ : int8) := ((((cast x8).+(cast x16)).+(cast x32)).+(cast x64)).+(cast xs) : int8 in
  tt.

Definition fn_pointer_cast (_ : unit) : unit :=
  let (f : int32 -> int32) := fun x =>
      x : int32 -> int32 in
  tt.

Definition math_integers (x : t_Int_t) : int8 :=
  let (_ : t_Int_t) := f_lift (@repr WORDSIZE32 3) : t_Int_t in
  let _ := (impl__Int___unsafe_from_str -340282366920938463463374607431768211455000)>.?(impl__Int___unsafe_from_str 340282366920938463463374607431768211455000) : bool in
  let _ := x<.?x : bool in
  let _ := x>=.?x : bool in
  let _ := x<=.?x : bool in
  let _ := x<>x : bool in
  let _ := x=.?x : bool in
  let _ := x.+x : t_Int_t in
  let _ := x.-x : t_Int_t in
  let _ := x.*x : t_Int_t in
  let _ := x./x : t_Int_t in
  let (_ : int16) := impl__Int__to_i16 x : int16 in
  let (_ : int32) := impl__Int__to_i32 x : int32 in
  let (_ : int64) := impl__Int__to_i64 x : int64 in
  let (_ : int128) := impl__Int__to_i128 x : int128 in
  let (_ : uint_size) := impl__Int__to_isize x : uint_size in
  let (_ : int16) := impl__Int__to_u16 x : int16 in
  let (_ : int32) := impl__Int__to_u32 x : int32 in
  let (_ : int64) := impl__Int__to_u64 x : int64 in
  let (_ : int128) := impl__Int__to_u128 x : int128 in
  let (_ : uint_size) := impl__Int__to_usize x : uint_size in
  impl__Int__to_u8 (x.+(x.*x)).

Definition numeric (_ : unit) : unit :=
  let (_ : uint_size) := (@repr WORDSIZE32 123) : uint_size in
  let (_ : uint_size) := (@repr WORDSIZE32 42) : uint_size in
  let (_ : uint_size) := (@repr WORDSIZE32 42) : uint_size in
  let (_ : int32) := (@repr WORDSIZE32 42) : int32 in
  let (_ : int128) := (@repr WORDSIZE128 22222222222222222222) : int128 in
  tt.

Definition panic_with_msg (_ : unit) : unit :=
  never_to_any (panic_fmt (impl_2__new_const (array_from_list [with msg]))).

Definition empty_array (_ : unit) : unit :=
  let (_ : seq int8) := unsize !TODO empty array! : seq int8 in
  tt.

Record t_Foo : Type := {
  f_field : int8;
}.

Definition v_CONSTANT : t_Foo_t :=
  Build_Foo (f_field := (@repr WORDSIZE8 3)).

Definition patterns (_ : unit) : unit :=
  let _ := match (@repr WORDSIZE8 1) with
    | (@repr WORDSIZE8 2) =>
      tt
    | _ =>
      tt
    end : unit in
  let _ := match (hello,((@repr WORDSIZE32 123),array_from_list [a;
            b])) with
    | '(hello,((@repr WORDSIZE32 123),_todo)) =>
      tt
    | _ =>
      tt
    end : unit in
  let _ := match Build_Foo (f_field := (@repr WORDSIZE8 4)) with
    | {|
      f_field := (@repr WORDSIZE8 3)
    |} =>
      tt
    | _ =>
      tt
    end : unit in
  tt.
'''
