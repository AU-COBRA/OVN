---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: fstar
  info:
    name: guards
    manifest: guards/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Guards.fst" = '''
module Guards
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let equivalent (x: Core.Option.t_Option (Core.Result.t_Result i32 i32)) : i32 =
  match x with
  | Core.Option.Option_None  -> 0l
  | _ ->
    match
      match x with
      | Core.Option.Option_Some v ->
        (match v with
          | Core.Result.Result_Ok y -> Core.Option.Option_Some y <: Core.Option.t_Option i32
          | _ -> Core.Option.Option_None <: Core.Option.t_Option i32)
      | _ -> Core.Option.Option_None <: Core.Option.t_Option i32
    with
    | Core.Option.Option_Some y -> y
    | Core.Option.Option_None  ->
      match x with
      | Core.Option.Option_Some (Core.Result.Result_Err y) -> y
      | _ -> 1l

let if_guard (x: Core.Option.t_Option i32) : i32 =
  match
    match x with
    | Core.Option.Option_Some v ->
      (match v >. 0l with
        | true -> Core.Option.Option_Some v <: Core.Option.t_Option i32
        | _ -> Core.Option.Option_None <: Core.Option.t_Option i32)
    | _ -> Core.Option.Option_None <: Core.Option.t_Option i32
  with
  | Core.Option.Option_Some x -> x
  | Core.Option.Option_None  -> 0l

let if_let_guard (x: Core.Option.t_Option (Core.Result.t_Result i32 i32)) : i32 =
  match x with
  | Core.Option.Option_None  -> 0l
  | _ ->
    match
      match x with
      | Core.Option.Option_Some v ->
        (match v with
          | Core.Result.Result_Ok y -> Core.Option.Option_Some y <: Core.Option.t_Option i32
          | _ -> Core.Option.Option_None <: Core.Option.t_Option i32)
      | _ -> Core.Option.Option_None <: Core.Option.t_Option i32
    with
    | Core.Option.Option_Some x -> x
    | Core.Option.Option_None  ->
      match x with
      | Core.Option.Option_Some (Core.Result.Result_Err y) -> y
      | _ -> 1l

let multiple_guards (x: Core.Option.t_Option (Core.Result.t_Result i32 i32)) : i32 =
  match x with
  | Core.Option.Option_None  -> 0l
  | _ ->
    match
      match x with
      | Core.Option.Option_Some (Core.Result.Result_Ok v) ->
        (match Core.Option.Option_Some (v +! 1l) <: Core.Option.t_Option i32 with
          | Core.Option.Option_Some 1l -> Core.Option.Option_Some 0l <: Core.Option.t_Option i32
          | _ -> Core.Option.Option_None <: Core.Option.t_Option i32)
      | _ -> Core.Option.Option_None <: Core.Option.t_Option i32
    with
    | Core.Option.Option_Some x -> x
    | Core.Option.Option_None  ->
      match
        match x with
        | Core.Option.Option_Some v ->
          (match v with
            | Core.Result.Result_Ok y -> Core.Option.Option_Some y <: Core.Option.t_Option i32
            | _ -> Core.Option.Option_None <: Core.Option.t_Option i32)
        | _ -> Core.Option.Option_None <: Core.Option.t_Option i32
      with
      | Core.Option.Option_Some x -> x
      | Core.Option.Option_None  ->
        match x with
        | Core.Option.Option_Some (Core.Result.Result_Err y) -> y
        | _ -> 1l
'''
