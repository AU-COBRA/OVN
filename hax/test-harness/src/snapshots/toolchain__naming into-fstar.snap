---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: fstar
  info:
    name: naming
    manifest: naming/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Naming.Ambiguous_names.fst" = '''
module Naming.Ambiguous_names
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let debug (label value: u32) : Prims.unit =
  let _:Prims.unit =
    Std.Io.Stdio.v__print (Core.Fmt.impl_2__new_v1 (sz 3)
          (sz 2)
          (let list = ["["; "] a="; "\n"] in
            FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 3);
            Rust_primitives.Hax.array_of_list 3 list)
          (let list =
              [
                Core.Fmt.Rt.impl_1__new_display #u32 label <: Core.Fmt.Rt.t_Argument;
                Core.Fmt.Rt.impl_1__new_display #u32 value <: Core.Fmt.Rt.t_Argument
              ]
            in
            FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 2);
            Rust_primitives.Hax.array_of_list 2 list)
        <:
        Core.Fmt.t_Arguments)
  in
  ()

/// `f` stacks mutliple let bindings declaring different `a`s.
let f (_: Prims.unit) : Prims.unit =
  let a_1_:u32 = 104ul in
  let a_2_:u32 = 205ul in
  let a_3_:u32 = 306ul in
  let a:u32 = 123ul in
  let _:Prims.unit = debug 3ul a_3_ in
  let _:Prims.unit = debug 2ul a_2_ in
  let _:Prims.unit = debug 1ul a_1_ in
  debug 4ul a

/// `f` is expanded into `f_expand` below, while the execution of `f` gives:
/// ```plaintext
///  [3] a=306
///  [2] a=205
///  [1] a=104
///  [last] a=123
/// ```
let ff_expand (_: Prims.unit) : Prims.unit =
  let a:i32 = 104l in
  let a:i32 = 205l in
  let a:i32 = 306l in
  let a:u32 = 123ul in
  let _:Prims.unit = debug 3ul a in
  let _:Prims.unit = debug 2ul a in
  let _:Prims.unit = debug 1ul a in
  debug 0ul a
'''
"Naming.F.G.Impl_1.G.Hello.fst" = '''
module Naming.F.G.Impl_1.G.Hello
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let h (_: Prims.unit) : Prims.unit = ()
'''
"Naming.fst" = '''
module Naming
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_Foo =
  | Foo_A : t_Foo
  | Foo_B { f_x:usize }: t_Foo

let impl__Foo__f (self: t_Foo) : t_Foo = Foo_A <: t_Foo

type t_Foo2 =
  | Foo2_A : t_Foo2
  | Foo2_B { f_x:usize }: t_Foo2

class t_FooTrait (v_Self: Type0) = { f_ASSOCIATED_CONSTANT:usize }

class t_T1 (v_Self: Type0) = { __marker_trait_t_T1:Prims.unit }

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_T1_for_Foo: t_T1 t_Foo = { __marker_trait = () }

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_T1_for_tuple_Foo_u8: t_T1 (t_Foo & u8) = { __marker_trait = () }

class t_T2_for_a (v_Self: Type0) = { __marker_trait_t_T2_for_a:Prims.unit }

class t_T3_e_for_a (v_Self: Type0) = { __marker_trait_t_T3_e_for_a:Prims.unit }

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_T3_e_e_for_a_for_Foo: t_T3_e_for_a t_Foo = { __marker_trait = () }

let v_INHERENT_CONSTANT: usize = sz 3

let constants
      (#v_T: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i1: t_FooTrait v_T)
      (_: Prims.unit)
    : usize = f_ASSOCIATED_CONSTANT +! v_INHERENT_CONSTANT

let ff__g (_: Prims.unit) : Prims.unit = ()

type t_f__g__impl__g__Foo =
  | C_f__g__impl__g__Foo_A : t_f__g__impl__g__Foo
  | C_f__g__impl__g__Foo_B { f_x:usize }: t_f__g__impl__g__Foo

let ff__g__impl_1__g (self: t_Foo) : usize = sz 1

let reserved_names (v_val v_noeq v_of: u8) : u8 = (v_val +! v_noeq <: u8) +! v_of

/// From issue https://github.com/hacspec/hax/issues/839
let string_shadows (v_string n: string) : Prims.unit = ()

type t_Arity1 (v_T: Type0) = | Arity1 : v_T -> t_Arity1 v_T

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_T2_e_for_a_for_Arity1_of_tuple_Foo_u8: t_T2_for_a (t_Arity1 (t_Foo & u8)) =
  { __marker_trait = () }

type t_B = | B : t_B

let impl__B__f (self: t_B) : t_B = B <: t_B

type t_C = { f_x:usize }

type t_Foobar = { f_a:t_Foo }

type t_StructA = { f_a:usize }

type t_StructB = {
  f_a:usize;
  f_b:usize
}

type t_StructC = { f_a:usize }

type t_StructD = {
  f_a:usize;
  f_b:usize
}

type t_X = | X : t_X

let construct_structs (a b: usize) : Prims.unit =
  let _:t_StructA = { f_a = a } <: t_StructA in
  let _:t_StructB = { f_a = a; f_b = b } <: t_StructB in
  let _:t_StructC = { f_a = a } <: t_StructC in
  let _:t_StructD = { f_a = a; f_b = b } <: t_StructD in
  ()

let f (x: t_Foobar) : usize = ff__g__impl_1__g x.f_a

let ff__g__impl__g (self: t_B) : usize = sz 0

let mk_c (_: Prims.unit) : t_C =
  let _:t_Foo = Foo_B ({ Naming.Foo.f_x = sz 3 }) <: t_Foo in
  let _:t_X = X <: t_X in
  { f_x = sz 3 } <: t_C
'''
