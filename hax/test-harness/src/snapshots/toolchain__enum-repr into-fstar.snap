---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: fstar
  info:
    name: enum-repr
    manifest: enum-repr/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: true
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0
stderr = 'Finished `dev` profile [unoptimized + debuginfo] target(s) in XXs'

[stdout]
diagnostics = []

[stdout.files]
"Enum_repr.fst" = '''
module Enum_repr
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let discriminant_EnumWithRepr_ExplicitDiscr1: u16 = 1us

let discriminant_EnumWithRepr_ExplicitDiscr2: u16 = 5us

type t_EnumWithRepr =
  | EnumWithRepr_ExplicitDiscr1 : t_EnumWithRepr
  | EnumWithRepr_ExplicitDiscr2 : t_EnumWithRepr
  | EnumWithRepr_ImplicitDiscrEmptyTuple : t_EnumWithRepr
  | EnumWithRepr_ImplicitDiscrEmptyStruct : t_EnumWithRepr

let t_EnumWithRepr_cast_to_repr (x: t_EnumWithRepr) : u16 =
  match x with
  | EnumWithRepr_ExplicitDiscr1  -> discriminant_EnumWithRepr_ExplicitDiscr1
  | EnumWithRepr_ExplicitDiscr2  -> discriminant_EnumWithRepr_ExplicitDiscr2
  | EnumWithRepr_ImplicitDiscrEmptyTuple  -> discriminant_EnumWithRepr_ExplicitDiscr2 +! 1us
  | EnumWithRepr_ImplicitDiscrEmptyStruct  -> discriminant_EnumWithRepr_ExplicitDiscr2 +! 2us

let f (_: Prims.unit) : u32 =
  let v__x:u16 = cast (discriminant_EnumWithRepr_ExplicitDiscr2 +! 0us <: u16) <: u16 in
  (cast (t_EnumWithRepr_cast_to_repr (EnumWithRepr_ImplicitDiscrEmptyTuple <: t_EnumWithRepr) <: u16
      )
    <:
    u32) +!
  (cast (t_EnumWithRepr_cast_to_repr (EnumWithRepr_ImplicitDiscrEmptyStruct <: t_EnumWithRepr)
        <:
        u16)
    <:
    u32)

let ff__CONST: u16 = cast (discriminant_EnumWithRepr_ExplicitDiscr1 +! 0us <: u16) <: u16

let get_casted_repr (x: t_EnumWithRepr) : u64 = cast (t_EnumWithRepr_cast_to_repr x <: u16) <: u64

let get_repr (x: t_EnumWithRepr) : u16 = t_EnumWithRepr_cast_to_repr x
'''
