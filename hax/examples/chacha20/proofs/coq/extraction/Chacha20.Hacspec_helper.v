(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Super. (* as State *)

(*Not implemented yet? todo(item)*)

Definition to_le_u32s_3_ (bytes : seq int8) : nseq int32 TODO: Int.to_string length :=
  let out := (repeat (@repr WORDSIZE32 0) (@repr WORDSIZE32 3)) : nseq int32 TODO: Int.to_string length in
  let out := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 3))) out (fun out i =>
      update_at out i (impl__u32__from_le_bytes (impl__unwrap (f_try_into (bytes.[(Build_Range ((@repr WORDSIZE32 4).*i)(((@repr WORDSIZE32 4).*i).+(@repr WORDSIZE32 4)))])))))) : nseq int32 TODO: Int.to_string length in
  out.

Definition to_le_u32s_8_ (bytes : seq int8) : nseq int32 TODO: Int.to_string length :=
  let out := (repeat (@repr WORDSIZE32 0) (@repr WORDSIZE32 8)) : nseq int32 TODO: Int.to_string length in
  let out := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 8))) out (fun out i =>
      update_at out i (impl__u32__from_le_bytes (impl__unwrap (f_try_into (bytes.[(Build_Range ((@repr WORDSIZE32 4).*i)(((@repr WORDSIZE32 4).*i).+(@repr WORDSIZE32 4)))])))))) : nseq int32 TODO: Int.to_string length in
  out.

Definition to_le_u32s_16_ (bytes : seq int8) : nseq int32 TODO: Int.to_string length :=
  let out := (repeat (@repr WORDSIZE32 0) (@repr WORDSIZE32 16)) : nseq int32 TODO: Int.to_string length in
  let out := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 16))) out (fun out i =>
      update_at out i (impl__u32__from_le_bytes (impl__unwrap (f_try_into (bytes.[(Build_Range ((@repr WORDSIZE32 4).*i)(((@repr WORDSIZE32 4).*i).+(@repr WORDSIZE32 4)))])))))) : nseq int32 TODO: Int.to_string length in
  out.

Definition u32s_to_le_bytes (state : nseq int32 TODO: Int.to_string length) : nseq int8 TODO: Int.to_string length :=
  let out := (repeat (@repr WORDSIZE8 0) (@repr WORDSIZE32 64)) : nseq int8 TODO: Int.to_string length in
  let out := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(impl__len (unsize state)))) out (fun out i =>
      let tmp := (impl__u32__to_le_bytes (state.[i])) : nseq int8 TODO: Int.to_string length in
      f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 4))) out (fun out j =>
        update_at out ((i.*(@repr WORDSIZE32 4)).+j) (tmp.[j])))) : nseq int8 TODO: Int.to_string length in
  out.

Definition xor_state (state : nseq int32 TODO: Int.to_string length) (other : nseq int32 TODO: Int.to_string length) : nseq int32 TODO: Int.to_string length :=
  let state := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 16))) state (fun state i =>
      update_at state i ((state.[i]).^(other.[i])))) : nseq int32 TODO: Int.to_string length in
  state.

Definition add_state (state : nseq int32 TODO: Int.to_string length) (other : nseq int32 TODO: Int.to_string length) : nseq int32 TODO: Int.to_string length :=
  let state := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 16))) state (fun state i =>
      update_at state i (impl__u32__wrapping_add (state.[i]) (other.[i])))) : nseq int32 TODO: Int.to_string length in
  state.

Definition update_array (array : nseq int8 TODO: Int.to_string length) (val : seq int8) : nseq int8 TODO: Int.to_string length :=
  let _ := (if
      not ((@repr WORDSIZE32 64)>=.?(impl__len val))
    then
      never_to_any (panic assertion failed: 64 >= val.len())
    else
      tt) : unit in
  let array := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(impl__len val))) array (fun array i =>
      update_at array i (val.[i]))) : nseq int8 TODO: Int.to_string length in
  array.
