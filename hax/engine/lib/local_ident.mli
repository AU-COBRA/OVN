module T : sig
  type kind =
    | Typ  (** type namespace *)
    | Cnst  (** Generic constant namespace *)
    | Expr  (** Expression namespace *)
    | LILifetime  (** Lifetime namespace *)
    | Final
        (** Frozen identifier: such an identifier will *not* be rewritten by the name policy *)
    | SideEffectHoistVar  (** A variable generated by `Side_effect_utils` *)
  [@@deriving show, yojson, hash, compare, sexp, eq]

  type id [@@deriving show, yojson, hash, compare, sexp, eq]

  val mk_id : kind -> int -> id

  type t = { name : string; id : id }
  [@@deriving show, yojson, hash, compare, sexp, eq]

  val make_final : string -> t
  (** Creates a frozen final local identifier: such an indentifier won't be rewritten by a name policy *)

  val is_final : t -> bool
  val is_side_effect_hoist_var : t -> bool
end

include module type of struct
  include Base.Comparator.Make (T)
  include T
end
